{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AICafe AICafe is a Python package.","title":"Home"},{"location":"#welcome-to-aicafe","text":"AICafe is a Python package.","title":"Welcome to AICafe"},{"location":"gramma/","text":"Welcome to iCafe For users, please start from User Guide . Using code block: 1 2 3 def main (): print ( 'hello world' ) return 0 Using footnotes: Lorem ipsum 1 dolor sit amet, consectetur 2 adipiscing elit. Using keys: Ctrl + Alt + A Using admonitions and tabs: this is an example Unordered List Ordered List Example : 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Example : 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci asdasd asdasd asdasd asdasd asdasdasdasd Using images: Image caption Using abbreviations: The HTML specification is maintained by the W3C HTML . Using highlighting changes: Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Using equations: $$ f(x)=\\int_i \\text{d}\\boldsymbol{x} $$ The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . this is a footnote. \u21a9 this is another footnote. \u21a9","title":"Welcome to iCafe"},{"location":"gramma/#welcome-to-icafe","text":"For users, please start from User Guide . Using code block: 1 2 3 def main (): print ( 'hello world' ) return 0 Using footnotes: Lorem ipsum 1 dolor sit amet, consectetur 2 adipiscing elit. Using keys: Ctrl + Alt + A Using admonitions and tabs: this is an example Unordered List Ordered List Example : 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Example : 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci asdasd asdasd asdasd asdasd asdasdasdasd Using images: Image caption Using abbreviations: The HTML specification is maintained by the W3C HTML . Using highlighting changes: Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Using equations: $$ f(x)=\\int_i \\text{d}\\boldsymbol{x} $$ The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . this is a footnote. \u21a9 this is another footnote. \u21a9","title":"Welcome to iCafe"},{"location":"apis/","text":"Introduction This is the introduction of APIs. With a custom title: Object 1 With the identifier as title: aicafe.core.elements.points.Points","title":"Introduction"},{"location":"apis/#introduction","text":"This is the introduction of APIs. With a custom title: Object 1 With the identifier as title: aicafe.core.elements.points.Points","title":"Introduction"},{"location":"apis/elements/points%20copy/","text":"aicafe.elements.Points This class represents points in a 3D space. It is a subclass of np.ndarray , and thus supports all numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension equal to 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] . Initialization To initialize a Points instance, simply generate an ArrayLike data structure, and then pass it to __init__() : 1 2 3 4 5 6 7 8 9 import numpy as np # initialize with numpy array array = np . ones (( 2 , 1 , 3 )) points = Points ( array ) # initialize with a list that can be reshaped to `[..., 3]` array = [ 1 , 0 , 1 ] points = Points ( array ) Then you can apply any numpy functions to points , and the return will always be a Points class Class reference Methods distance(points) -> np.ndarray Parameters: points return the distance between self points and the input points. Attributes","title":"`aicafe.elements.Points`"},{"location":"apis/elements/points%20copy/#aicafeelementspoints","text":"This class represents points in a 3D space. It is a subclass of np.ndarray , and thus supports all numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension equal to 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] .","title":"aicafe.elements.Points"},{"location":"apis/elements/points%20copy/#initialization","text":"To initialize a Points instance, simply generate an ArrayLike data structure, and then pass it to __init__() : 1 2 3 4 5 6 7 8 9 import numpy as np # initialize with numpy array array = np . ones (( 2 , 1 , 3 )) points = Points ( array ) # initialize with a list that can be reshaped to `[..., 3]` array = [ 1 , 0 , 1 ] points = Points ( array ) Then you can apply any numpy functions to points , and the return will always be a Points class","title":"Initialization"},{"location":"apis/elements/points%20copy/#class-reference","text":"","title":"Class reference"},{"location":"apis/elements/points%20copy/#methods","text":"","title":"Methods"},{"location":"apis/elements/points%20copy/#distancepoints-npndarray","text":"Parameters: points return the distance between self points and the input points.","title":"distance(points) -&gt; np.ndarray"},{"location":"apis/elements/points%20copy/#attributes","text":"","title":"Attributes"},{"location":"apis/elements/points/","text":"Points ( ndarray ) This class represents a set of points in a 3D space. It is a subclass of Numpy's ndarray , and thus supports all Numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension as 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] . dot ( self , points ) dot. Parameters: Name Type Description Default points Points points required Returns: Type Description np.ndarray is_outside_box ( self , box , allowance = 0 ) Parameters: Name Type Description Default box ArrayLike [x_min, x_max, y_min, y_max, z_min, z_max] or shape of [..., 3, 2] required allowance Union[int, float] distance allowed for self to leave the box 0 Returns: Type Description np.ndarray[bool] whether the self is outside the bounding box with some allowance True if a point is outside box: [x_min - allowance, x_max + allowance, y_min - allowance, y_max + allowance, z_min - allowance, z_max + allowance] is_outside_img ( self , shape_img ) Parameters: Name Type Description Default shape_img Sequence[Union[int, float]] shape_img required Returns: Type Description bool whether self is outside the image boundaries points_on_path ( self , points , step = 1 , num_points = None ) generate points on the path from self to the input points. Parameters: Name Type Description Default step coordinate length of step, i.e., distance between two adjacent points on the path, not used if num_points is not None 1 num_points int number of points on the path. If not specified, it will be calculated as the distance between first point in self and first point in input points divided by step None Returns: Type Description points (Points) this includes self and the input points This class represents points in a 3D space. It is a subclass of np.ndarray , and thus supports all numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension equal to 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] .","title":"Points"},{"location":"apis/elements/points/#aicafe.core.elements.points.Points","text":"This class represents a set of points in a 3D space. It is a subclass of Numpy's ndarray , and thus supports all Numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension as 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] .","title":"Points"},{"location":"apis/elements/points/#aicafe.core.elements.points.Points.dot","text":"dot. Parameters: Name Type Description Default points Points points required Returns: Type Description np.ndarray","title":"dot()"},{"location":"apis/elements/points/#aicafe.core.elements.points.Points.is_outside_box","text":"Parameters: Name Type Description Default box ArrayLike [x_min, x_max, y_min, y_max, z_min, z_max] or shape of [..., 3, 2] required allowance Union[int, float] distance allowed for self to leave the box 0 Returns: Type Description np.ndarray[bool] whether the self is outside the bounding box with some allowance True if a point is outside box: [x_min - allowance, x_max + allowance, y_min - allowance, y_max + allowance, z_min - allowance, z_max + allowance]","title":"is_outside_box()"},{"location":"apis/elements/points/#aicafe.core.elements.points.Points.is_outside_img","text":"Parameters: Name Type Description Default shape_img Sequence[Union[int, float]] shape_img required Returns: Type Description bool whether self is outside the image boundaries","title":"is_outside_img()"},{"location":"apis/elements/points/#aicafe.core.elements.points.Points.points_on_path","text":"generate points on the path from self to the input points. Parameters: Name Type Description Default step coordinate length of step, i.e., distance between two adjacent points on the path, not used if num_points is not None 1 num_points int number of points on the path. If not specified, it will be calculated as the distance between first point in self and first point in input points divided by step None Returns: Type Description points (Points) this includes self and the input points This class represents points in a 3D space. It is a subclass of np.ndarray , and thus supports all numpy functions, methods, and attributes, but also has some additional methods and attributes. By default, its shape is always [..., 3] , where 3 indicates the dimension. For example, a Points instance with shape of [2, 4, 3] contains the coordinates of \\(2\\times4=8\\) 3D points. Keep the last dimension equal to 3 There is no restriction on changing the last dimension from 3 to any other number. However, all methods and properties of Points are designed to work only when the last dimension is 3. Therefore, if you want to apply some numpy function or operation to a Points instance, take care to make sure that the result still has shape of [... , 3] .","title":"points_on_path()"},{"location":"user-guide/","text":"Introduction This is the introduction for iCafe users. PC Requirements System iCafe is currently built for Windows 10. Windows 7 and earlier versions were not tested. Linux/MacOS may be supported in the future. Hardware High performance GPUs are recommended, as the 3D rendering requires large calculation. At least 8GB memory is needed to perform the 3D filtering of images size of \\(600\\times600\\times200\\) . Remote desktop connection based on OpenGL is not supported, but remote software based on screen capturing, such as Teamviewer and VNC, are not affected. How to acquire or update iCafe Acquisition VIL lab members : The newest version is available under Public/LiChen/iCafe folder. Researchers outside the lab : Please contact Li Chen ( cluw@uw.edu ) for iCafe software with academic research agreement with VIL. Updating Generally, the new version will be compatible with older ones. For updating iCafe, just copy and paste iCafe.exe with replacement if not explicitly noted. Subversion upgrades (from 1.2 to 1.3) need copying whole folder.","title":"Introduction"},{"location":"user-guide/#introduction","text":"This is the introduction for iCafe users.","title":"Introduction"},{"location":"user-guide/#pc-requirements","text":"","title":"PC Requirements"},{"location":"user-guide/#system","text":"iCafe is currently built for Windows 10. Windows 7 and earlier versions were not tested. Linux/MacOS may be supported in the future.","title":"System"},{"location":"user-guide/#hardware","text":"High performance GPUs are recommended, as the 3D rendering requires large calculation. At least 8GB memory is needed to perform the 3D filtering of images size of \\(600\\times600\\times200\\) . Remote desktop connection based on OpenGL is not supported, but remote software based on screen capturing, such as Teamviewer and VNC, are not affected.","title":"Hardware"},{"location":"user-guide/#how-to-acquire-or-update-icafe","text":"","title":"How to acquire or update iCafe"},{"location":"user-guide/#acquisition","text":"VIL lab members : The newest version is available under Public/LiChen/iCafe folder. Researchers outside the lab : Please contact Li Chen ( cluw@uw.edu ) for iCafe software with academic research agreement with VIL.","title":"Acquisition"},{"location":"user-guide/#updating","text":"Generally, the new version will be compatible with older ones. For updating iCafe, just copy and paste iCafe.exe with replacement if not explicitly noted. Subversion upgrades (from 1.2 to 1.3) need copying whole folder.","title":"Updating"}]}